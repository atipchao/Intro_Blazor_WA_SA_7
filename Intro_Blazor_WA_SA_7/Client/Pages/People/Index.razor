@page "/people"
@using System.Globalization
@inject HttpClient http
@inject IJSRuntime js


<h3>People</h3>

<a class="btn btn-success" href="people/create">New Person</a>


@if(people == null)
{
    <text>Loading...</text>
}
else if(people.Length == 0)
{
    <text>No People Found!</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var person in people)
            {
                <tr>
                    <td>
                        <a class="btn btn-success" href="people/edit/@person.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="(() => DeletePerson(person.Id))" >Delete</button>
                    </td>
                    <td>@person.Id</td>
                    <td>@person.Name</td>
                </tr>
            }
        </tbody>        
    </table>
    <button @onclick="ExportAsCSV" >Export as CSV</button>
}


@code {
    Person[] people { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPeople();
    }

    async Task LoadPeople()
    {
        people = await http.GetFromJsonAsync<Person[]>("api/people");
    }

    async Task DeletePerson(int personId)
    {
        var selectedPerson = people.First(s => s.Id == personId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete this..{selectedPerson.Name} ?"))
        {
            await http.DeleteAsync($"api/people/{personId}");
            await LoadPeople();
        }

    }

    private void ExportAsCSV()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvHelper.CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(people);
                }
                var arr = memoryStream.ToArray();
                js.SaveAs("export.csv", arr);
            }

        }

    }
}
